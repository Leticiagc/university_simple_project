{{>licenseInfo}}

package {{package}};
import {{package}}.ProfessorRepository;
import {{package}}.ProfessorService;
import {{invokerPackage}}.ApiException;
{{#imports}}import {{import}};
{{/imports}}
import org.junit.jupiter.api.Test;
import org.junit.Ignore;
import org.junit.Assert;

import org.api.mocktests.utils.MockTest;
import org.api.mocktests.annotations.AuthenticatedTest;

import org.junit.jupiter.api.*;
import org.junit.jupiter.params.provider.MethodSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;

import java.time.LocalDate;
import java.time.OffsetDateTime;
{{^fullJavaUtil}}
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

{{/fullJavaUtil}}
/**
* API tests for {{classname}}
*/
public class {{classname}}Test {
private final {{classname}} api = new {{classname}}();

@Autowired
private MockMvc mockMvc;

@Autowired
private MockTest mockTest;

//@Autowired todo:
//private {{classname}}Service {{classname}}service;

//@Autowired todo:
//private {{classname}}Service {{classname}}service;

//@BeforeEach
//public void beforeTests() throws Exception {} todo:

{{#operations}}
    {{#operation}}
        /**
        {{#summary}}
            * {{.}}
            *
        {{/summary}}
        {{#notes}}
            * {{.}}
            *
        {{/notes}}
        * @throws ApiException
        *          if the Api call fails
        */
        @Test
        @ParameterizedTest
        @DisplayName({{getById}}) todo:
        @MethodSource({cases}}) todo:
        @AuthenticatedTest
        public void {{operationId}}Test() throws ApiException {
        //{{#allParams}}
            //{{classname}}Professor {{classname}}professor = {{operation}}.{{operation}}({{param}});

            //mockTest.{{performRequest}}(new {{classname}}.{{method}}({param}).{{url}}({{urlName}}.{{paramName}}({{param}})
            //.{{method}}({{param}})
            //.{{method}}({{param}},{{method}}({{param}}))))
            //.{{method}}({{param}},{{method}}({{param}}))))
            //.{{method}}({{param}},{{method}}({{param}}))));


        // TODO: test validations
        }

        * @throws ApiException
        *          if the Api call fails
        */
        @Test
        @ParameterizedTest
        public void {{operationExceptionId}}Test() throws ApiException {
        //{{#allParams}}
            //{{{dataType}}} {{paramName}} = null;
            //{{/allParams}}
        //{{#returnType}}{{{.}}} response = {{/returnType}}api.{{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});

        // TODO: test validations
        }
    {{/operation}}
{{/operations}}
}