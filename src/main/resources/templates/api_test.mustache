{{>licenseInfo}}

package {{package}};
import {{package}}.ProfessorRepository;
import {{package}}.ProfessorService;
import {{invokerPackage}}.ApiException;
{{#imports}}import {{import}};
{{/imports}}

{{#mockTests}}
import org.api.mocktests.annotations.Authenticate;
import org.api.mocktests.annotations.AuthenticatedTest;
import org.api.mocktests.annotations.AutoConfigureRequest;
import org.api.mocktests.models.Method;
import org.api.mocktests.models.Request;
import org.api.mocktests.utils.MockTest;
{{/mockTests}}

{{#junitTest}}
import org.junit.jupiter.api.Test;
import org.junit.Ignore;
import org.junit.Assert;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
{{/junitTest}}

import org.api.mocktests.utils.MockTest;
import org.api.mocktests.annotations.AuthenticatedTest;

import org.junit.jupiter.api.*;
import org.junit.jupiter.params.provider.MethodSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;

import java.time.LocalDate;
import java.time.OffsetDateTime;
{{^fullJavaUtil}}
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
{{/fullJavaUtil}}

{{#spring}}
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.util.LinkedMultiValueMap;
{{/spring}}

/**
* API tests for {{classname}}
*/
public class {{classname}}Test {
private final {{classname}} api = new {{classname}}();
<<<<<<< HEAD

@Autowired
private MockMvc mockMvc;

@Autowired
private MockTest mockTest;

//@Autowired todo:
//private {{classname}}Service {{classname}}service;

//@Autowired todo:
//private {{classname}}Service {{classname}}service;

//@BeforeEach
//public void beforeTests() throws Exception {} todo:

=======
{{>generatedAnnotation}}
@SpringBootTest
>>>>>>> 0371cbde8e2d0d0126a77db88fac5a2212996ecb
{{#operations}}
    {{operation}}
    public class {{classname}} {
        @Autowired
        private MockMvc mockMvc;

        @Autowired
        private MockTest mockTest;

        @Test
        @ParameterizedTest
        @DisplayName({{getById}}) todo:
        @MethodSource({cases}}) todo:
        @AuthenticatedTest
        public void {{operationId}}Test() throws ApiException {
<<<<<<< HEAD
        //{{#allParams}}
            //{{classname}}Professor {{classname}}professor = {{operation}}.{{operation}}({{param}});
            //mockTest.{{performRequest}}(new {{classname}}.{{method}}({param}).{{url}}({{urlName}}.{{paramName}}({{param}})
            //.{{method}}({{param}})
            //.{{method}}({{param}},{{method}}({{param}}))))
            //.{{method}}({{param}},{{method}}({{param}}))))
            //.{{method}}({{param}},{{method}}({{param}}))));

=======
        {{#allParams}}

            //{{{dataType}}} {{paramName}} = null;
        {{/allParams}}
        //{{#returnType}}{{{.}}} response = {{/returnType}}api.{{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
>>>>>>> 0371cbde8e2d0d0126a77db88fac5a2212996ecb

        // TODO: test validations
        }

        * @throws ApiException
        *          if the Api call fails
        */
        //@ParameterizedTest
        @DisplayName({{display}})
        //@MethodSource("professorCases")
        //@AuthenticatedTest
        public void {{operationExceptionId}}Test() throws ApiException {
            //mockTest.{{operation}}(new Request().method({{method}}).url({{urlName}}).pathParams(INVALID_INPUT))
            //.andExpect(status().{{status}});
        }
    }
    }
    {{operation}}
{{/operations}}